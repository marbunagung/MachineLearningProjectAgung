# -*- coding: utf-8 -*-
"""SubmissionProject2Agung.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ejqNT40jTH1sn57vuhXs8nFcaamxNUSS
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

from keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler

data = pd.read_csv("hour.csv")
data.head()

data.isnull().sum()

data.sum()

data.shape

date = data['dteday'].values
temp = data['temp'].values

plt.figure(figsize=(15, 5))
plt.plot(date, temp)
plt.title('Temprature During the day',
          fontsize=20);

from sklearn.model_selection import train_test_split

train_size = int(len(data) * 0.8)
train, test = data.iloc[0:train_size], data.iloc[train_size:len(data)]

print(train.shape, test.shape)

scaler = MinMaxScaler()

train_scale = scaler.fit_transform(train['cnt'].values.reshape(-1, 1))
test_scale = scaler.fit_transform(test['cnt'].values.reshape(-1, 1))

split=int((1-0.2)*len(data))

date_train = data.index[:split]
date_test = data.index[split:]

from keras.preprocessing.sequence import TimeseriesGenerator
look_back = 20
train_gen = TimeseriesGenerator(train_scale, train_scale, length=look_back, batch_size=20)     
test_gen = TimeseriesGenerator(test_scale, test_scale, length=look_back, batch_size=1)

model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(128,return_sequences=True),
    tf.keras.layers.LSTM(128),
    tf.keras.layers.Dropout(rate=0.4),
    tf.keras.layers.Dense(30, activation="relu"),
    tf.keras.layers.Dense(30, activation="relu"),
    tf.keras.layers.Dense(1)
])

class my_callback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if(logs.get('mae') < 0.1):
          self.model.stop_training = True
          print(" MAE telah mencapai dibawah 10%")

    def on_train_end(self, epoch, logs={}):
        print('Done')

callbacks = my_callback()

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit(train_gen,epochs=30,
                    callbacks = callbacks,
                    shuffle=False)