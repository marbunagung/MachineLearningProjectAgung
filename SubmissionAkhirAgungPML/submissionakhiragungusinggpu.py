# -*- coding: utf-8 -*-
"""SubmissionAkhirAgungUsingGPU.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w4aavi-dSqjOu9AtYSD_qxYgw4UYSyoB

Nama : Agung Marbun Submission Akhir Pengembangan Machine Learning dengan memakai lebih dari 10 ribu data dengan 3 kelas berbeda.
"""

import tensorflow as tf
tf.test.gpu_device_name()

"""Disini saya akhirnya menggunakan GPU dan sangat sangat membantu untuk mempercepat proses eksekusi epoch, saya mencoba tanpa GPU dan dapat memakan waktu sampai 2 jam dan itupun berujung Outoftime(Runtime terputus)"""

import zipfile, os
local_zip = '/content/ShoeSandalBoot.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/ShoeSandalBoot')
zip_ref.close()
 
base_dir = '/content/ShoeSandalBoot/Shoe vs Sandal vs Boot Dataset'

"""Saya download data berikut melalui kaggle, berikut saya lampirkan linknya : https://www.kaggle.com/datasets/hasibalmuzdadid/shoe-vs-sandal-vs-boot-dataset-15k-images."""

os.listdir('/content/ShoeSandalBoot/Shoe vs Sandal vs Boot Dataset')

"""Kita dapat lihat bahwa terdapat 3 kelas berbeda pada dataset saya."""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
 
train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'wrap',
                    validation_split=0.2)

"""Sesuai tips and trick dari mimin dicoding disini saya hanya melakukan data augmentation pada data training saja. "Pastikan hanya melakukan data augmentation pada data training saja sehingga dapat menjaga konsistensi terhadap data validation yang digunakan sebagai referensi."
"""

train_datagen

# Membuat generator untuk data latih dan validasi
train_generator = train_datagen.flow_from_directory(
    base_dir,
    # target_size=(100, 150), agar tidak seragam
    shuffle=True,
    class_mode='categorical',
    subset='training')

validation_generator = train_datagen.flow_from_directory(
    base_dir,
    # target_size=(100, 150),
    shuffle=True,
    class_mode='categorical',
    subset='validation')

"""Disini kita bisa melihat bahwa kita memiliki 15000 data dengan 3 different classes. Disini saya tidak mengeksekusi kode **target_size** karena saya ingin mencoba memenuhi kriteria bintang 5 pada ketentuan di proyek akhir."""

# Model dan kompilasi
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(None, None, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(256, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

"""Disini saya juga menerapkan hal yang sama pada input_shape dimana saya ingin agar dataset tidak seragam."""

model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

"""Disini saya menggunakan categorical_crossentropy karena saya mempunyai 3 kelas yang berbeda."""

class myCallbacks(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.92 and logs.get('val_accuracy')>0.92):
      self.model.stop_training = True
      print("\nAkurasi telah mencapai > 92%!")
callbacks = myCallbacks()

"""Disini saya juga mengaplikasikan callback dengan tujuan apabila akurasi telah terpenuhi maka akan stop dengan sendirinya dengan kode self.model.stop_training."""

# Pelatihan model
with tf.device('/device:GPU:0'):
  history = model.fit(train_generator,
          steps_per_epoch=25,
          epochs=200,
          validation_data=validation_generator,
          validation_steps=5,
          verbose=2,
          callbacks=[myCallbacks()])

"""Setelah akurasi terpenuhi maka selanjutnya saya plot menggunakan library/modul matplotlib.pyplot"""

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Akurasi Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""Menulis kode untuk menyimpan model ke dalam format TF-Lite."""

import warnings
warnings.filterwarnings('ignore')

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)